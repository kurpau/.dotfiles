cd .dotfiles/zsh
cd .config
mkdir zsh
ls -a
mv .zshrc zsh
mv completion.zsh zsh
clear
ls
cd  zsh
ls -a
clear
cd ..
cd ..
cd ..
clear
cd ..
ls -a
rm .zshenv
cd .config
ls
ls -a
rm .zshrc
rm completion.zsh
clear
cd ..
cd .dotfiles/zsh
cd ..
stow zsh
exec zsh
nvim zsh
exec zsh
cd ..
stow zsh
exec zsh
stow zsh
exec zsh
exec zsh
echo $DOTFILES
echo $hello
echo no
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
clear
exit
echo $XDG_CONFIG_HOME
exec zsh
clear
exec zsh
clear
git status
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
clear
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
clear
clear
exec zsh
exec zsh
exec zsh
exec zsh
clear
clear
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
git status
git add .
clear
exec zsh
ls
ls -a
ls -a
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
clear
clear
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
clear
clear
clear
clear
clear
clear
exec zsh
exec zsh
exec zsh
clear
clear
exec zsh
clear
clear
exec zsh
exec zsh
clear
clear
exec zsh
exec zsh
exec zsh
exec zsh
clear
exec zsh
exec zsh
exec zsh
clear
exec zsh
echo -n
echo -n lol
clear
man echo
man echo
exit
cd .config/zsh
clear
ls
ls -a
mkdir plugs
mv completion.zsh plugs
nvim .
mv plugs plugins
ls
ls -a
nvim .
clear
exec zsh
clear
exec zsh
exec zsh
nvim .
git status --porcelain
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
git status
git status
exec zsh
git status --porcelain -b
git status --porcelain -b
git status --porcelain
git status --porcelain -b 2> /dev/null
command
command git status --porcelain -b 2> /dev/null
INDEX=$(command git status --porcelain -b 2> /dev/null)
echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null
echo "$INDEX" | grep '^ M ' &> /dev/null
echo "$INDEX" | grep '^ M \

echo "$INDEX" | grep '^ M '
echo "$INDEX" | command grep -E '^\?\? '
git branch -v | grep -E 'ahead|behind' | sed -r 's/[ *]\s(\S*).*(\[(ahead|behind).+?\]).*/\1 \2/g'
git rev-list {local}..{remote} --count
remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \\
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}
$remote
ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)\
        (( $ahead )) && gitstatus+=( "${c3}+${ahead}${c2}" )
$ahead
behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)\
        (( $behind )) && gitstatus+=( "${c4}-${behind}${c2}" )
$behind
git remote -v
git rev-list --left-right --count main...origin/main\

git rev-list --left-right --count main origin/main\

git status -sb
exec zsh
clear
clear
exec zsh
git status -sb
git add .
git commit -m "Update config"
clear
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
git restore .
git add .
git status
git restore .
clear
git status
git restore --staged .
exec zsh
git add .
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
exec zsh
